# This file is managed by gitlab-ctl. Manual changes will be
# erased! To change the contents below, edit /etc/gitlab/gitlab.rb
# and run `sudo gitlab-ctl reconfigure`.

## Lines starting with two hashes (##) are comments with information.
## Lines starting with one hash (#) are configuration parameters that can be uncommented.
##
###################################
##         configuration         ##
###################################

<% if @https && @redirect_http_to_https %>
## Redirects all HTTP traffic to the HTTPS host
server {
<% @listen_addresses.each do |listen_address| %>
  listen <%= listen_address %>:<%= @redirect_http_to_https_port %><% if @proxy_protocol %> proxy_protocol<% end %>;
<% end %>
  server_name  ~^(?<group>.*)\.<%= @fqdn_regex %>$;
  server_tokens off; ## Don't show the nginx version number, a security best practice
  return 301 https://$http_host:<%= @port %>$request_uri;
  access_log  <%= @log_directory %>/gitlab_pages_access.log gitlab_access;
  error_log   <%= @log_directory %>/gitlab_pages_error.log <%= @error_log_level%>;
}
<% end %>

<% if @namespace_in_path %>
## Experimental - Handle requests having namespace in path
## See https://gitlab.com/gitlab-org/gitlab/-/issues/211677
server {
<% @listen_addresses.each do |listen_address| %>
  listen <%= listen_address %>:<%= @listen_port %><% if @proxy_protocol %> proxy_protocol<% end %><% if @https %> ssl<% if @http2_enabled %> http2<% end %><% end %>;
<% end %>
  server_name  ~^<%= @fqdn_regex %>$;

<%= render "nginx-gitlab-pages-http-common-server.erb" %>

  # In case of a unique domain URL, add a trailing '/' if it's missing
  location ~ ^/(?<namespace>[^/]+)$ {
    return 301 $scheme://$http_host$request_uri/;
  }

  # Pass when namespace in path to pages daemon after the rewrite
  location ~ ^/(?<namespace>[^/]+)/(?<project>.*)$ {
    ## Rewrite remove namespace from path
    rewrite ^/([^/]+)/(.*)$ /$2 break;

    <% @proxy_set_headers.each do |header| %>
      <% next if header[1].nil? %>
      <% if header[0] == "Host" %>
    ## Put namespace back in host from path
    proxy_set_header <%= header[0] %> <%= "$1."+header[1] %>;
      <% else %>
    proxy_set_header <%= header[0] %> <%= header[1] %>;
      <% end %>
    <% end %>
    proxy_set_header X-Gitlab-Namespace-In-Path $namespace;

<%= render "nginx-gitlab-pages-http-common-location.erb" %>

    ## Put namespace in path from host before sending it to the user
  <% @proxy_redirect.each do |redirect| %>
    proxy_redirect <%= redirect[0] %> <%= redirect[1] %>;
  <% end %>
  }

  <%= @custom_gitlab_server_config %>
}
<% end %>

server {
<% @listen_addresses.each do |listen_address| %>
  listen <%= listen_address %>:<%= @listen_port %><% if @proxy_protocol %> proxy_protocol<% end %><% if @https %> ssl<% if @http2_enabled %> http2<% end %><% end %>;
<% end %>
  server_name  ~^(?<group>.*)\.<%= @fqdn_regex %>$;

<%= render "nginx-gitlab-pages-http-common-server.erb" %>

  # Pass everything to pages daemon when namespace in host
  location / {
    <% @proxy_set_headers.each do |header| %>
    <% next if header[1].nil? %>
    proxy_set_header <%= header[0] %> <%= header[1] %>;
    <% end %>
    proxy_hide_header X-Gitlab-Namespace-In-Path;

<%= render "nginx-gitlab-pages-http-common-location.erb" %>
  }

  <%= @custom_gitlab_server_config %>
}
