# This config lists the jobs that will be run on omnibus-gitlab project in
# dev.gitlab.org.

#############
# Templates #
#############

.unless-dev: &unless-dev
  if: '$CI_PROJECT_PATH != "gitlab/omnibus-gitlab"'

.if-branch: &if-branch
  if: '$CI_COMMIT_BRANCH'

.if-tag: &if-tag
  if: '$CI_COMMIT_TAG'

.if-auto-deploy-tag: &if-auto-deploy-tag
  if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+\+[^ ]{7,}\.[^ ]{7,}$/'

.if-rc-tag: &if-rc-tag
  if: '$CI_COMMIT_TAG =~ /^.*\+rc.*/'

.if-ee-tag: &if-ee-tag
  if: '$CI_COMMIT_TAG =~ /^.*ee\.\d.*$/'

.if-ee-branch: &if-ee-branch
  if: '$CI_COMMIT_BRANCH =~ /^.*-ee$/'

.if-ce-tag: &if-ce-tag
  if: '$CI_COMMIT_TAG =~ /^.*ce\.\d.*$/'

.if-ee-var: &if-ee-var
  if: '$ee == "true"'

.if-nightly: &if-nightly
  if: '$CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY == "true"'

.unless-nightly: &unless-nightly
  if: '$CI_PIPELINE_SOURCE != "schedule" || $NIGHTLY != "true"'

.dev-branches-only: &dev-branches-only
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-branch

.dev-tag-only: &dev-tag-only
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-tag

.dev-tag-only-manual: &dev-tag-only-manual
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-tag
      when: manual
      allow_failure: true

.dev-tag-only-except-auto-deploy: &dev-tag-only-except-auto-deploy
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-auto-deploy-tag
      when: never
    - <<: *if-tag

.dev-tag-only-except-auto-deploy-manual: &dev-tag-only-except-auto-deploy-manual
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-auto-deploy-tag
      when: never
    - <<: *if-tag
      when: manual
      allow_failure: true

.dev-tag-only-except-auto-deploy-or-rc: &dev-tag-only-except-auto-deploy-or-rc
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-rc-tag
      when: never
    - <<: *if-auto-deploy-tag
      when: never
    - <<: *if-tag

.dev-tag-only-except-auto-deploy-or-rc-manual: &dev-tag-only-except-auto-deploy-or-rc-manual
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-rc-tag
      when: never
    - <<: *if-auto-deploy-tag
      when: never
    - <<: *if-tag
      when: manual
      allow_failure: true

.dev-ce-tag-only-except-rc-manual: &dev-ce-tag-only-except-rc-manual
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-rc-tag
      when: never
    - <<: *if-ce-tag
      when: manual
      allow_failure: true

.dev-ee-tag-only-except-auto-deploy-or-rc-manual: &dev-ee-tag-only-except-auto-deploy-or-rc-manual
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-rc-tag
      when: never
    - <<: *if-auto-deploy-tag
      when: never
    - <<: *if-ee-tag
      when: manual
      allow_failure: true

.dev-ce-branch-only-except-nightly: &dev-ce-branch-only-except-nightly
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-ee-var
      when: never
    - <<: *if-ee-branch
      when: never
    # https://gitlab.com/gitlab-org/omnibus-gitlab/-/merge_requests/3199
    # removed RPi jobs from nightly.
    - <<: *if-nightly
      when: never
    - <<: *if-branch

.dev-ee-branch-only: &dev-ee-branch-only
  rules:
    - <<: *unless-dev
      when: never
    - if: '$CI_COMMIT_BRANCH == ""'
      when: never
    - <<: *if-ee-var
    - <<: *if-ee-branch

.dev-ce-tag-only: &dev-ce-tag-only
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-ce-tag

.dev-ce-tag-only-manual: &dev-ce-tag-only-manual
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-ce-tag
      when: manual
      allow_failure: true

.dev-ee-tag-only: &dev-ee-tag-only
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-ee-tag

.dev-ee-tag-only-manual: &dev-ee-tag-only-manual
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-ee-tag
      when: manual
      allow_failure: true

.dev-tag-and-nightly: &dev-tag-and-nightly
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-tag
    - <<: *if-nightly

.dev-nightly-and-tag-except-auto-deploy: &dev-nightly-and-tag-except-auto-deploy
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-auto-deploy-tag
      when: never
    - <<: *if-tag
    - <<: *if-nightly

.dev-nightly-only-manual: &dev-nightly-only-manual
  rules:
    - <<: *unless-dev
      when: never
    - <<: *if-nightly
      when: manual
      allow_failure: true

.dev-ee-nightly-only: &dev-ee-nightly-only
  rules:
    - <<: *unless-dev
      when: never
    - <<: *unless-nightly
      when: never
    - <<: *if-ee-var

.package-artifacts: &package-artifacts
  when: always
  expire_in: 1 day
  paths:
    - pkg/

.package-artifacts-release: &package-artifacts-release
  <<: *package-artifacts
  expire_in: 7 days

.branch-cache: &branch-cache
  key: "${CI_JOB_NAME}-branch-${BUILDER_IMAGE_REVISION}"
  paths:
  - cache
  - gems
  - assets_cache
  - .yarn-cache

.tag-cache: &tag-cache
  key: "${CI_JOB_NAME}-${BUILDER_IMAGE_REVISION}"
  <<: *branch-cache

.branch_template: &branch_build
  stage: package-and-image
  script:
    - echo -e "[default]\naws_access_key_id = $AWS_ACCESS_KEY_ID \naws_secret_access_key = $AWS_SECRET_ACCESS_KEY" > ~/.aws/config
    # GPG key for package signing
    - AWS_ACCESS_KEY_ID="$SECRET_AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$SECRET_AWS_SECRET_ACCESS_KEY" aws s3 cp s3://omnibus-sig/package.sig.key .
    - gpg --batch --no-tty --allow-secret-key-import --import package.sig.key
    - bundle exec rake cache:populate
    - bundle exec rake cache:restore
    - bundle exec rake build:project build:package:sync
    - bundle exec rake cache:bundle
    - bundle exec rake build:component_shas
    - bundle exec rspec --color --format RspecJunitFormatter --out junit_ci_rspec.xml --format documentation ci_build_specs
  tags:
  - docker-builder
  <<: *dev-branches-only
  artifacts:
    <<: *package-artifacts
    reports:
      junit: junit_ci_rspec.xml
  dependencies:
    - fetch-assets
  cache: *branch-cache
  retry: 1

.rpi_branch_template: &rpi_branch_build
  <<: *branch_build
  stage: slow_jobs
  variables:
    NO_SOURCEMAPS: "true"
  tags:
  - docker-rpi-builder
  <<: *dev-ce-branch-only-except-nightly
  artifacts: *package-artifacts
  retry: 1

.tag_template: &tag_build
  stage: package-and-image
  script:
    # Always compile assets for auto-deploy builds,
    # this is done for auto-deploy builds
    # so that we do not have to wait for the compile assets job
    # in the gitlab-ee pipeline.
    #
    # NOTE (rspeicher): Checking `$AUTO_DEPLOY_COMPILE_ASSETS` as a feature flag
    # See https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/5805
    - |
      if [ -n "$AUTO_DEPLOY_COMPILE_ASSETS" ] && echo $CI_COMMIT_TAG | grep -P -q "$AUTO_DEPLOY_TAG_REGEX"; then
        echo "Setting COMPILE_ASSETS env variable for auto-deploy"
        export COMPILE_ASSETS='true';
      fi
    - echo -e "[default]\naws_access_key_id = $AWS_ACCESS_KEY_ID \naws_secret_access_key = $AWS_SECRET_ACCESS_KEY" > ~/.aws/config
    # GPG key for package signing
    - AWS_ACCESS_KEY_ID="$SECRET_AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$SECRET_AWS_SECRET_ACCESS_KEY" aws s3 cp s3://omnibus-sig/package.sig.key .
    - gpg --batch --no-tty --allow-secret-key-import --import package.sig.key
    - bundle exec rake cache:populate
    - bundle exec rake cache:restore
    - bundle exec rake release:package
    - bundle exec rake cache:bundle
    - bundle exec rake build:component_shas
  tags:
  - docker-builder
  <<: *dev-tag-only-except-auto-deploy
  artifacts: *package-artifacts-release
  dependencies:
    - fetch-assets
  cache: *tag-cache
  retry: 1

.rpi_tag_template: &rpi_tag_build
  <<: *tag_build
  stage: slow_jobs
  variables:
    NO_SOURCEMAPS: "true"
  tags:
  - docker-rpi-builder
  <<: *dev-ce-tag-only

### This stage is used for uploading packages
### 1. To a staging package repository
### 2. Always ran on dev.gitlab.org
.staging_upload_template: &staging_upload
  stage: staging_upload
  image: "dev.gitlab.org:5005/gitlab/gitlab-build-images:omnibus-gitlab-xenial"
  script:
    - bundle exec rake repository:upload:staging[$STAGING_REPO]
  artifacts: *package-artifacts-release
  cache: *tag-cache
  retry: 2
  tags:
  - promotion
  <<: *dev-tag-only-except-auto-deploy

### This stage is ran only on tag:
### 1. It is a manual action
### 2. It will upload the package to public, user facing repositories
### 3. Only ran on dev.gitlab.org
.production_release_template: &production_release
  stage: package-and-image-release
  image: "dev.gitlab.org:5005/gitlab/gitlab-build-images:omnibus-gitlab-xenial"
  script:
    - bundle exec rake repository:upload:production
  retry: 2
  <<: *dev-tag-only-except-auto-deploy-manual
  cache: *tag-cache
  tags:
  - promotion

.raspbian_release_template: &raspbian_release
  <<: *production_release
  variables:
    RASPBERRY_REPO: "raspberry-pi2"
  stage: raspbian-release
  retry: 2
  <<: *dev-ce-tag-only-manual

.aws_ami_build: &aws_ami_build
  stage: package-and-image-release
  image: "${BUILDER_IMAGE_REGISTRY}/debian_packer:${BUILDER_IMAGE_REVISION}"
  script:
  # aws-sdk gem gives priority to environment variables over config file. So, using correct values for those variables.
  - export AWS_ACCESS_KEY_ID=$AWS_AMI_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY=$AWS_AMI_SECRET_ACCESS_KEY
  - bundle exec rake aws:process
  allow_failure: true
  tags:
  - docker-builder
  <<: *dev-tag-only-except-auto-deploy-or-rc-manual
  cache: *tag-cache
  dependencies: []
  retry: 1

.aws_marketplace_release: &aws_marketplace_release
  image: "${BUILDER_IMAGE_REGISTRY}/ruby_docker:${BUILDER_IMAGE_REVISION}"
  stage: aws-marketplace-release
  allow_failure: true
  script:
    - curl --request POST
      --form "token=$AWS_RELEASE_TRIGGER_TOKEN"
      --form ref=master
      --form "variables[GITLAB_VERSION]=$CI_COMMIT_TAG"
      --form "variables[AWS_LISTING_NAME]=$AWS_LISTING_NAME"
      https://dev.gitlab.org/api/v4/projects/1035/trigger/pipeline
  <<: *dev-ee-tag-only-except-auto-deploy-or-rc-manual
  dependencies:
    - AWS

###########################
#     Branch pipeline     #
###########################

# fetch-assets job from .gitlab-ci.yml file runs here

# We build package for deploying to GitLab.com first
Ubuntu-16.04-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_16.04:${BUILDER_IMAGE_REVISION}"
  stage: gitlab_com:package
  extends: .branch_template

Ubuntu-18.04-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_18.04:${BUILDER_IMAGE_REVISION}"
  stage: gitlab_com:package
  extends: .branch_template

Debian-9-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_9:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
Debian-10-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_10:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
Ubuntu-20.04-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_20.04:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
Ubuntu-20.04-arm-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_20.04_arm64:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
  tags:
  - docker-arm-builder
CentOS-6-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/centos_6:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
CentOS-7-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/centos_7:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
CentOS-8-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/centos_8:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
OpenSUSE-15.1-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/opensuse_15.1:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
OpenSUSE-15.1-arm64-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/opensuse_15.1_arm64:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
  tags:
  - docker-arm-builder
SLES-12.2-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/sles_12sp2:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
  <<: *dev-ee-branch-only
SLES-12.5-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/sles_12sp5:${BUILDER_IMAGE_REVISION}"
  <<: *branch_build
  <<: *dev-ee-branch-only

Docker-branch:
  extends: .docker_job
  stage: package-and-image
  script:
  - bundle exec rake docker:build:image
  - bundle exec rake docker:push:staging
  - bundle exec rake docker:push:nightly
  <<: *dev-branches-only
  tags:
  - docker-builder
  cache: *branch-cache
  dependencies: []
  retry: 1

Docker-branch-measure-memory:
  extends: .measure_memory_script_artifacts
  stage: metrics
  # To be made back to automatic once
  # https://gitlab.com/gitlab-org/gitlab/-/issues/215000 is done.
  <<: *dev-nightly-only-manual
  tags:
  - docker-builder
  cache: *branch-cache
  dependencies: []

QA-branch:
  extends: .docker_job
  stage: package-and-image
  variables:
    QA_SCREENSHOTS_DIR: $CI_PROJECT_DIR/screenshots
  script:
    - bundle exec rake qa:build
    - bundle exec rake qa:push:nightly
    - bundle exec rake qa:push:staging
  artifacts:
    when: on_failure
    expire_in: 7d
    paths:
    - screenshots/
  allow_failure: true
  <<: *dev-branches-only
  tags:
  - docker-builder
  cache: *branch-cache
  dependencies:
    - Ubuntu-16.04-branch
  retry: 1

Raspberry-Pi-2-Buster-branch:
  image: "${BUILDER_IMAGE_REGISTRY}/rpi_10:${BUILDER_IMAGE_REVISION}"
  <<: *rpi_branch_build

# This job runs only on nightly EE builds
HA-Validate-Nightly:
  stage: slow_jobs
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_16.04:${BUILDER_IMAGE_REVISION}"
  script:
    - '[[ -n "${NIGHTLY}" ]] || exit 0'
    - bundle exec rake qa:ha:nightly
  <<: *dev-ee-nightly-only
  cache: *branch-cache
  dependencies: []

############################
#     Release pipeline     #
############################

# fetch-assets job from .gitlab-ci.yml file runs here

# We build package for deploying to GitLab.com first
Ubuntu-16.04:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_16.04:${BUILDER_IMAGE_REVISION}"
  stage: gitlab_com:package
  extends: .tag_template
  # Also build for auto-deploy tags
  <<: *dev-tag-only

Ubuntu-18.04:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_18.04:${BUILDER_IMAGE_REVISION}"
  stage: gitlab_com:package
  extends: .tag_template

## Build the docker image for QA
## This is necessary for the deployment
## pipeline so it must happen before
## the upload and deploy stage for GitLab.com
Docker-QA:
  extends: .docker_job
  stage: gitlab_com:package
  script:
    - bundle exec rake qa:build qa:push:staging
  <<: *dev-tag-only
  cache: *tag-cache
  tags:
  - docker-builder
  dependencies: []
  retry: 1

###########################################################
## Upload and deploy to staging or preprod for GitLab.com
## * Regular tagged releases are deployed to staging
## * Auto-deploy tagged releases are deployed to
##   $AUTO_DEPLOY_ENVIRONMENT, set in CI vars
## * Regular patch releases, RCs and tags that are
##   not auto-deploys are deployed to
##   $PATCH_DEPLOY_ENVIRONMENT, set in CI vars
##
##  Ubuntu 16.04: used for all omnibus installation
##  Ubuntu 18.04: used on some non-omnibus infrastructure, we
##                will eventually need to trigger deployments
##                after this package is built

Ubuntu-16.04-upload-deploy:
  stage: gitlab_com:upload_deploy
  extends: .staging_upload_template
  dependencies:
    - Ubuntu-16.04
    - Ubuntu-16.04-branch
  script:
    - bundle exec rake repository:upload:staging[$STAGING_REPO]
    - if [ -n "$DEPLOYER_TRIGGER_TOKEN" ]; then bundle exec rake gitlab_com:deployer; fi
  <<: *dev-tag-and-nightly

Ubuntu-18.04-staging:
  stage: gitlab_com:upload_deploy
  extends: .staging_upload_template
  dependencies:
    - Ubuntu-18.04
    - Ubuntu-18.04-branch
  <<: *dev-nightly-and-tag-except-auto-deploy

### Package builds
Debian-9:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_9:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
Debian-10:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_10:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
Ubuntu-20.04:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_20.04:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
Ubuntu-20.04-arm:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_20.04_arm64:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
  tags:
  - docker-arm-builder
CentOS-6:
  image: "${BUILDER_IMAGE_REGISTRY}/centos_6:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
CentOS-7:
  image: "${BUILDER_IMAGE_REGISTRY}/centos_7:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
CentOS-8:
  image: "${BUILDER_IMAGE_REGISTRY}/centos_8:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
OpenSUSE-15.1:
  image: "${BUILDER_IMAGE_REGISTRY}/opensuse_15.1:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
  <<: *tag_build
OpenSUSE-15.1-arm64:
  image: "${BUILDER_IMAGE_REGISTRY}/opensuse_15.1_arm64:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
  tags:
  - docker-arm-builder
SLES-12.2:
  image: "${BUILDER_IMAGE_REGISTRY}/sles_12sp2:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
  <<: *dev-ee-tag-only
SLES-12.5:
  image: "${BUILDER_IMAGE_REGISTRY}/sles_12sp2:${BUILDER_IMAGE_REVISION}"
  <<: *tag_build
  <<: *dev-ee-tag-only

create_omnibus_manifest:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_10:${BUILDER_IMAGE_REVISION}"
  stage: prepare-assets
  variables:
    TERM: xterm-256color
  script:
    - bundle exec omnibus manifest gitlab -l nothing 2> /dev/null > version-manifest.json
  <<: *dev-nightly-and-tag-except-auto-deploy
  cache: *tag-cache
  artifacts:
    expire_in: 7 days
    paths:
      - version-manifest.json

dependency_scanning:
  image: "registry.gitlab.com/gitlab-org/security-products/gitlab-depscan:2.1.0"
  stage: package-and-image
  variables:
    REPORT_PATH: ./
    NVD_DB_UPDATE: "true"
  before_script: []
  script:
    - echo ${CVEIGNORE} | sed -r "s/, */\n/g" >> .cveignore
    - /gitlab-depscan.sh version-manifest.json
  <<: *dev-nightly-and-tag-except-auto-deploy
  needs:
    - create_omnibus_manifest
  artifacts:
    expire_in: 7 days
    when: on_failure
    paths:
      - dependency_report.txt
      - gl-dependency-scanning-report.json
      - .cveignore

Docker:
  extends: .docker_job
  stage: package-and-image
  script:
  - bundle exec rake docker:build:image
  - bundle exec rake docker:push:staging
  <<: *dev-tag-only
  tags:
  - docker-builder
  cache: *tag-cache
  dependencies: []
  retry: 1

Docker-measure-memory:
  extends: .measure_memory_script_artifacts
  stage: metrics
  <<: *dev-tag-only-except-auto-deploy-manual
  tags:
  - docker-builder
  cache: *tag-cache
  dependencies: []

### Staging uploads
Debian-9-staging:
  dependencies:
    - Debian-9
    - Debian-9-branch
  <<: *staging_upload
Debian-10-staging:
  dependencies:
    - Debian-10
    - Debian-10-branch
  <<: *staging_upload
Ubuntu-20.04-staging:
  dependencies:
    - Ubuntu-20.04
    - Ubuntu-20.04-branch
  <<: *staging_upload
Ubuntu-20.04-arm-staging:
  dependencies:
    - Ubuntu-20.04-arm
    - Ubuntu-20.04-arm-branch
  <<: *staging_upload
CentOS-6-staging:
  dependencies:
    - CentOS-6
    - CentOS-6-branch
  <<: *staging_upload
CentOS-7-staging:
  dependencies:
    - CentOS-7
    - CentOS-7-branch
  <<: *staging_upload
CentOS-8-staging:
  dependencies:
    - CentOS-8
    - CentOS-8-branch
  <<: *staging_upload
OpenSUSE-15.1-staging:
  dependencies:
    - OpenSUSE-15.1
    - OpenSUSE-15.1-branch
  <<: *staging_upload
OpenSUSE-15.1-arm64-staging:
  dependencies:
    - OpenSUSE-15.1-arm64
    - OpenSUSE-15.1-arm64-branch
  <<: *staging_upload
SLES-12.2-staging:
  dependencies:
    - SLES-12.2
    - SLES-12.2-branch
  <<: *staging_upload
  <<: *dev-ee-tag-only
SLES-12.5-staging:
  dependencies:
    - SLES-12.5
    - SLES-12.5-branch
  <<: *staging_upload
  <<: *dev-ee-tag-only

### Package releases
Ubuntu-16.04-release:
  dependencies:
    - Ubuntu-16.04
  <<: *production_release
Ubuntu-18.04-release:
  dependencies:
    - Ubuntu-18.04
  <<: *production_release
Ubuntu-20.04-release:
  dependencies:
    - Ubuntu-20.04
  <<: *production_release
Ubuntu-20.04-arm-release:
  dependencies:
    - Ubuntu-20.04-arm
  <<: *production_release
Debian-9-release:
  dependencies:
    - Debian-9
  <<: *production_release
Debian-10-release:
  dependencies:
    - Debian-10
  <<: *production_release
CentOS-6-release:
  dependencies:
    - CentOS-6
  <<: *production_release
CentOS-7-release:
  dependencies:
    - CentOS-7
  <<: *production_release
CentOS-8-release:
  dependencies:
    - CentOS-8
  <<: *production_release
OpenSUSE-15.1-release:
  dependencies:
    - OpenSUSE-15.1
  <<: *production_release
OpenSUSE-15.1-arm64-release:
  dependencies:
    - OpenSUSE-15.1-arm64
  <<: *production_release
SLES-12.2-release:
  <<: *production_release
  dependencies:
    - SLES-12.2
  <<: *dev-ee-tag-only-except-auto-deploy-or-rc-manual
SLES-12.5-release:
  <<: *production_release
  dependencies:
    - SLES-12.5
  <<: *dev-ee-tag-only-except-auto-deploy-or-rc-manual

Docker-Release:
  extends: .docker_job
  stage: package-and-image-release
  script:
    - bundle exec rake release:docker
  <<: *dev-tag-only-except-auto-deploy-manual
  cache: *tag-cache
  dependencies: []

AWS:
  <<: *aws_ami_build

AWS-Ultimate:
  variables:
    AWS_RELEASE_TYPE: "ultimate"
  <<: *aws_ami_build
  <<: *dev-ee-tag-only-except-auto-deploy-or-rc-manual

AWS-Premium:
  variables:
    AWS_RELEASE_TYPE: "premium"
  <<: *aws_ami_build
  <<: *dev-ee-tag-only-except-auto-deploy-or-rc-manual

QA-Tag:
  extends: .docker_job
  stage: package-and-image-release
  variables:
    QA_SCREENSHOTS_DIR: $CI_PROJECT_DIR/screenshots
  script:
    - bundle exec rake release:qa
  artifacts:
    when: on_failure
    expire_in: 7d
    paths:
    - screenshots/
  allow_failure: true
  <<: *dev-tag-only-except-auto-deploy-manual
  tags:
  - docker-builder
  cache: *tag-cache
  dependencies:
    - Ubuntu-16.04
  retry: 1

upgrade:
  stage: metrics
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_16.04:${BUILDER_IMAGE_REVISION}"
  script:
    - echo $GCP_SERVICE_ACCOUNT > service_account.json
    - bundle exec rake metrics:upgrade_package
  allow_failure: true
  <<: *dev-tag-only-except-auto-deploy-manual
  tags:
  - docker-builder
  cache: *tag-cache
  dependencies: []

license-upload:
  stage: metrics
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_18.04:${BUILDER_IMAGE_REVISION}"
  script:
    - bundle exec rake license:upload
  allow_failure: true
  <<: *dev-tag-only-except-auto-deploy-manual
  tags:
  - docker-builder
  cache: *tag-cache
  dependencies:
    - Ubuntu-18.04

HA-Validate-Tagged:
  stage: slow_jobs
  image: "dev.gitlab.org:5005/cookbooks/gitlab-omnibus-builder/ubuntu_16.04:${BUILDER_IMAGE_REVISION}"
  script:
    - bundle exec rake qa:ha:tag
  <<: *dev-ee-tag-only
  cache: *tag-cache
  dependencies: []
  allow_failure: true

Raspberry-Pi-2-Buster:
  image: "${BUILDER_IMAGE_REGISTRY}/rpi_10:${BUILDER_IMAGE_REVISION}"
  <<: *rpi_tag_build

Raspberry-Pi-2-Buster-release:
  dependencies:
    - Raspberry-Pi-2-Buster
  <<: *raspbian_release

AWS-CE-Release:
  variables:
    AWS_LISTING_NAME: "GitLab Community Edition"
  extends: .aws_marketplace_release
  <<: *dev-ce-tag-only-except-rc-manual

AWS-EE-Ultimate-Release:
  variables:
    AWS_LISTING_NAME: "GitLab Ultimate"
  extends: .aws_marketplace_release

AWS-EE-Premium-Release:
  variables:
    AWS_LISTING_NAME: "GitLab Premium"
  extends: .aws_marketplace_release
